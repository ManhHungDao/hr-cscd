import mongoose from "mongoose";
const { Schema } = mongoose;

const PhoneSchema = new Schema(
  { label: String, number: String },
  { _id: false }
);
const EmailSchema = new Schema(
  { label: String, address: String },
  { _id: false }
);
const AddressSchema = new Schema(
  {
    line: String,
    ward: String,
    province: String,
  },
  { _id: false }
);

const RankPositionSchema = new Schema(
  {
    rank: {
      type: String,
      enum: [
        // üß© H·∫° sƒ© quan - Chi·∫øn sƒ©
        "Binh nh·∫•t",
        "Binh nh√¨",
        "H·∫° sƒ©",
        "Trung sƒ©",
        "Th∆∞·ª£ng sƒ©",

        // üß© C·∫•p √∫y
        "Thi·∫øu √∫y",
        "Trung √∫y",
        "Th∆∞·ª£ng √∫y",
        "ƒê·∫°i √∫y",

        // üß© C·∫•p t√°
        "Thi·∫øu t√°",
        "Trung t√°",
        "Th∆∞·ª£ng t√°",
        "ƒê·∫°i t√°",

        // üß© C·∫•p t∆∞·ªõng
        "Thi·∫øu t∆∞·ªõng",
        "Trung t∆∞·ªõng",
        "Th∆∞·ª£ng t∆∞·ªõng",
        "ƒê·∫°i t∆∞·ªõng",

        // üß© D·ª± ph√≤ng (n·∫øu c√≥ c√°n b·ªô ƒë·∫∑c bi·ªát ho·∫∑c d√¢n s·ª±)
        "Kh√¥ng x√°c ƒë·ªãnh",
      ],
      default: "Binh nh√¨",
    },
    position: String,
    from: { type: Date }, // ‚úÖ ƒë·ªïi sang Date
    to: { type: Date },
  },
  { _id: false }
);

const IdentityDocsSchema = new Schema(
  {
    policeCode: { type: String, index: true },
    cccd: String,
    cccdIssuedAt: { type: Date }, // ‚úÖ Date
    cccdIssuedPlace: String,
  },
  { _id: false }
);

const PartyInfoSchema = new Schema(
  {
    joinedPoliceAt: { type: Date },
    joinedPartyAt: { type: Date },
  },
  { _id: false }
);

const DemographicsSchema = new Schema(
  {
    birthDate: { type: Date },
    birthPlace: String,
    hometown: String,
    permanentAddress: String,
    currentAddress: AddressSchema,
    bloodType: {
      type: String,
      enum: ["A", "B", "AB", "O", "Unknown"],
      default: "Unknown",
    },
    religion: String,
    maritalStatus: {
      type: String,
      enum: ["ƒê·ªôc th√¢n", "K·∫øt h√¥n", "Kh√°c"],
    },
    childrenCount: Number,
  },
  { _id: false }
);

const ContactInfoSchema = new Schema(
  {
    phones: { type: [PhoneSchema], default: [] },
    emails: { type: [EmailSchema], default: [] },
    emergencyContact: { name: String, relation: String, phone: String },
  },
  { _id: false }
);

const EducationSchema = new Schema(
  {
    degree: String,
    major: String,
    mode: {
      type: String,
      enum: [
        "Ch√≠nh quy",
        "Li√™n th√¥ng",
        "T·∫°i ch·ª©c",
        "VƒÉn b·∫±ng 2",
        "T·∫°i ch·ª©c",
        "ƒê√†o t·∫°o t·ª´ xa",
        "Kh√°c",
      ],
      default: "Ch√≠nh quy",
    },
    grade: {
      type: String,
      enum: ["Xu·∫•t s·∫Øc", "Gi·ªèi", "Kh√°", "Trung b√¨nh", "Kh√°c"],
      default: "Kh√°c",
    },
    graduationYear: Number,
    institution: String,
    secondDegree: {
      major: String,
      institution: String,
      year: Number,
    },
  },
  { _id: false }
);

const LanguageSchema = new Schema(
  { name: String, level: String },
  { _id: false }
);

const SkillsSchema = new Schema(
  {
    politicsLevel: String,
    itLevel: String,
    language: { type: [LanguageSchema], default: [] },
    qpanLevel: String,
    drivingLicense: String,
  },
  { _id: false }
);

const TrainingItemSchema = new Schema(
  {
    name: { type: String, required: true },
    time: { type: Date }, // ‚úÖ
    place: String,
    certNo: String,
    score: String,
    note: String,
  },
  { _id: false }
);

const ServiceHistoryItemSchema = new Schema(
  {
    from: { type: Date, required: true },
    to: { type: Date },
    unitPath: String,
    position: String,
    decisionNo: String,
    note: String,
  },
  { _id: false }
);

const PromotionItemSchema = new Schema(
  {
    date: { type: Date }, // ‚úÖ
    fromRank: String,
    toRank: String,
    decisionNo: String,
  },
  { _id: false }
);

const SalaryStepItemSchema = new Schema(
  {
    date: { type: Date }, // ‚úÖ
    coefficient: Number,
    decisionNo: String,
  },
  { _id: false }
);

const AwardItemSchema = new Schema(
  {
    date: { type: Date }, // ‚úÖ
    title: String,
    decisionNo: String,
    note: String,
  },
  { _id: false }
);

const DisciplineItemSchema = new Schema(
  {
    date: { type: Date }, // ‚úÖ
    form: String,
    reason: String,
    decisionNo: String,
    note: String,
  },
  { _id: false }
);

const AttendanceSchema = new Schema(
  {
    period: {
      from: { type: Date }, // ‚úÖ
      to: { type: Date },
    },
    source: String,
    note: String,
  },
  { _id: false }
);

const DocumentItemSchema = new Schema(
  {
    /** üîπ Th√¥ng tin c∆° b·∫£n */
    name: { type: String, required: true }, // T√™n hi·ªÉn th·ªã (VD: "B√°o c√°o th√°ng 10")
    note: { type: String }, // Ghi ch√∫ t√πy ch·ªçn

    /** üîπ Lo·∫°i file & ph√¢n lo·∫°i */
    type: {
      type: String,
      enum: ["image", "pdf", "doc", "sheet", "other"], // Lo·∫°i t·ªáp
      default: "other",
    },
    tags: { type: [String], default: [] }, // T·ª´ kh√≥a t√¨m ki·∫øm (VD: ["b√°o c√°o", "t√†i ch√≠nh"])

    /** üîπ Metadata c·ªßa file th·ª±c t·∫ø (tr√™n ·ªï ƒëƒ©a) */
    originalName: String, // T√™n g·ªëc khi upload
    storedName: String, // T√™n ƒë√£ ƒë·ªïi khi l∆∞u (ƒë·ªÉ tr√°nh tr√πng)
    extension: String, // Ph·∫ßn m·ªü r·ªông (vd: ".pdf")
    mimeType: String, // Lo·∫°i MIME (vd: "application/pdf")
    size: Number, // K√≠ch th∆∞·ªõc file (bytes)
    checksum: String, // SHA256 ƒë·ªÉ ki·ªÉm tra to√†n v·∫πn file (t√πy ch·ªçn)

    /** üîπ Th√¥ng tin v·ªã tr√≠ l∆∞u tr·ªØ */
    storageType: {
      type: String,
      enum: ["local"], // C√≥ th·ªÉ m·ªü r·ªông th√™m: "s3", "gcs"
      default: "local",
    },
    baseDir: { type: String, default: "uploads" }, // Th∆∞ m·ª•c g·ªëc (kh√¥ng l·ªô ·ªï ƒëƒ©a th·∫≠t)
    relativePath: String, // ƒê∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi (vd: "soldiers/<id>/<file>.pdf")

    /** üîπ T·ª± ƒë·ªông sinh URL khi render ph√≠a client (t√πy backend) */
    url: String, // ƒê∆∞·ªùng d·∫´n ho·∫∑c API t·∫£i v·ªÅ (vd: "/api/files/xxx")

    /** üîπ Th√¥ng tin t·∫£i l√™n */
    uploadedAt: { type: Date, default: Date.now }, // Ng√†y upload
    uploadedBy: { type: Schema.Types.ObjectId, ref: "User" }, // Ai t·∫£i l√™n (n·∫øu c√≥ h·ªá user)
  },
  { _id: false } // kh√¥ng c·∫ßn id ri√™ng v√¨ ch·ªâ l√† subdocument
);

const ChildSchema = new Schema(
  {
    name: String,
    birthDate: { type: Date }, // ‚úÖ
    gender: String,
    school: String,
    note: String,
  },
  { _id: false }
);

const ParentsSchema = new Schema(
  {
    fatherName: String,
    fatherBirthYear: Number,
    fatherStatus: String,
    motherName: String,
    motherBirthYear: Number,
    motherStatus: String,
    address: String,
    phone: String,
  },
  { _id: false }
);

const FamilySchema = new Schema(
  {
    maritalStatus: {
      type: String,
      enum: ["ƒê·ªôc th√¢n", "K·∫øt h√¥n", "Kh√°c"],
    },
    marriageDate: { type: Date }, // ‚úÖ
    spouseName: String,
    spouseBirthYear: Number,
    spouseOccupation: String,
    spouseWorkplace: String,
    spousePhone: String,
    children: { type: [ChildSchema], default: [] },
    parents: ParentsSchema,
    householdRegistration: String,
    householdMembers: {
      type: [
        new Schema(
          {
            name: String,
            relation: String,
            birthYear: Number,
          },
          { _id: false }
        ),
      ],
      default: [],
    },
    nextOfKin: { name: String, relation: String, phone: String },
    familyPolicyStatus: String,
    familyNotes: String,
  },
  { _id: false }
);

const SoldierSchema = new Schema(
  {
    avatar: String,
    fullName: { type: String, required: true, index: true },
    current: RankPositionSchema,
    unitPath: String,

    identityDocs: IdentityDocsSchema,
    demographics: DemographicsSchema,
    contact: ContactInfoSchema,
    party: PartyInfoSchema,

    education: EducationSchema,
    skills: SkillsSchema,
    trainings: { type: [TrainingItemSchema], default: [] },

    serviceHistory: { type: [ServiceHistoryItemSchema], default: [] },
    promotions: { type: [PromotionItemSchema], default: [] },
    salarySteps: { type: [SalaryStepItemSchema], default: [] },

    awards: { type: [AwardItemSchema], default: [] },
    disciplines: { type: [DisciplineItemSchema], default: [] },

    attendance: AttendanceSchema,
    documents: { type: [DocumentItemSchema], default: [] },

    family: FamilySchema,

    notes: String,
  },
  { timestamps: true }
);
SoldierSchema.index({
  fullName: "text",
  "identityDocs.policeCode": 1,
  unitPath: 1,
  updatedAt: -1,
});
export const Soldier = mongoose.model("Soldier", SoldierSchema);
